(function () {
  // ---------- INIT ----------
  window.m3u8Store = window.m3u8Store || [];
  
  // Variabel untuk melacak urutan klik episode
  let episodeClickCounter = 0;
  let lastClickedEpisode = null;

  // Settings untuk auto export
  const AUTO_EXPORT_SETTINGS = {
    enabled: true,
    delay: 2000, // 2 detik setelah data terakhir
    minDataCount: 1
  };

  let autoExportTimer = null;
  let lastDataTimestamp = null;

  function extractEpisodeFromURL(url) {
    const match = url.match(/_(\d{1,3})\//);
    const episodeFromURL = match ? parseInt(match[1], 10) : null;
    
    if (episodeFromURL) return episodeFromURL;
    
    if (lastClickedEpisode) {
      return lastClickedEpisode;
    } else {
      episodeClickCounter++;
      return episodeClickCounter;
    }
  }

  // Setup event listener untuk melacak klik pada episode
  document.addEventListener('click', function(e) {
    const target = e.target;
    const isEpisodeElement = target.closest('a[href*="episode"]') || 
                            target.closest('button') ||
                            target.closest('[data-episode]') ||
                            target.closest('.episode');
    
    if (isEpisodeElement) {
      episodeClickCounter++;
      lastClickedEpisode = episodeClickCounter;
    }
  });

  // ---------- GET FILENAME FUNCTIONS ----------
  async function getFilenameFromClipboard() {
    try {
      const text = await navigator.clipboard.readText();
      if (text && text.trim().length > 0) {
        let cleanName = text.trim()
          .replace(/[<>:"/\\|?*]/g, '')
          .replace(/\s+/g, '_')
          .substring(0, 100);
        return cleanName;
      }
    } catch (error) {
      console.log("%c[Clipboard] Tidak bisa membaca clipboard", "color: orange;");
    }
    return null;
  }

  function getFilenameFromTitle() {
    try {
      const selectors = [
        '//*[@id="__nuxt"]/div[2]/div/div/div/div/div[2]/div/h1',
        'h1',
        '.title',
        '[class*="title"]',
        '[class*="judul"]'
      ];
      
      for (const selector of selectors) {
        try {
          let element;
          if (selector.startsWith('//')) {
            const result = document.evaluate(selector, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
            element = result.singleNodeValue;
          } else {
            element = document.querySelector(selector);
          }
          
          if (element && element.textContent && element.textContent.trim().length > 0) {
            let title = element.textContent.trim();
            title = title
              .replace(/[<>:"/\\|?*]/g, '')
              .replace(/\s+/g, '_')
              .substring(0, 100);
            return title;
          }
        } catch (e) {}
      }
    } catch (error) {
      console.log("%c[Title] Tidak bisa mendapatkan judul", "color: orange;");
    }
    return null;
  }

  async function generateFilename() {
    // Priority: Clipboard -> Title -> Default
    let filename = await getFilenameFromClipboard();
    
    if (!filename) {
      filename = getFilenameFromTitle();
    }
    
    if (!filename) {
      const now = new Date();
      filename = `m3u8_${now.getFullYear()}${(now.getMonth()+1).toString().padStart(2, '0')}${now.getDate().toString().padStart(2, '0')}_${now.getHours().toString().padStart(2, '0')}${now.getMinutes().toString().padStart(2, '0')}`;
    }
    
    return filename;
  }

  function saveRecord(url) {
    if (window.m3u8Store.some(r => r.url === url)) return;

    const episodeFromURL = extractEpisodeFromURL(url);
    const record = {
      pageURL: location.href,
      url: url,
      episodeDisplay: (document.querySelector(".ml-6")?.innerText || "").trim(),
      episodeNumber: episodeFromURL,
      timestamp: new Date().toISOString(),
      exported: false
    };
    window.m3u8Store.push(record);

    lastDataTimestamp = Date.now();
    
    console.log(
      `%c[M3U8 #${window.m3u8Store.length}]`,
      "color: lime;",
      "Episode:", record.episodeNumber ?? record.episodeDisplay
    );

    // Update count display
    updateCountDisplay();

    // Start auto export timer
    if (AUTO_EXPORT_SETTINGS.enabled && window.m3u8Store.length >= AUTO_EXPORT_SETTINGS.minDataCount) {
      startAutoExportTimer();
    }
  }

  // ---------- COUNT DISPLAY ----------
  function updateCountDisplay() {
    let countDisplay = document.getElementById('m3u8-count-display');
    
    if (!countDisplay) {
      countDisplay = document.createElement('div');
      countDisplay.id = 'm3u8-count-display';
      countDisplay.style.cssText = `
        position: fixed;
        top: 10px;
        left: 10px;
        z-index: 99998;
        background: #2c3e50;
        color: white;
        padding: 8px 12px;
        border-radius: 5px;
        font-family: Arial, sans-serif;
        font-size: 12px;
        font-weight: bold;
        box-shadow: 0 2px 5px rgba(0,0,0,0.3);
      `;
      document.body.appendChild(countDisplay);
    }
    
    countDisplay.textContent = `📊 ${window.m3u8Store.length} Data M3U8`;
    
    // Animasi ketika data bertambah
    countDisplay.style.transform = 'scale(1.1)';
    setTimeout(() => {
      countDisplay.style.transform = 'scale(1)';
    }, 300);
  }

  // ---------- AUTO EXPORT FEATURE ----------
  function startAutoExportTimer() {
    if (autoExportTimer) {
      clearTimeout(autoExportTimer);
    }
    
    autoExportTimer = setTimeout(() => {
      if (window.m3u8Store.length > 0 && AUTO_EXPORT_SETTINGS.enabled) {
        console.log(`%c[Auto Export] Data stabil, melakukan export...`, "color: green;");
        showExportPrompt();
      }
    }, AUTO_EXPORT_SETTINGS.delay);
  }

  async function showExportPrompt() {
    const defaultFilename = await generateFilename();
    const filename = `${defaultFilename}.json`;
    
    // Buat custom prompt yang lebih user friendly
    const promptResult = await createCustomPrompt(filename);
    
    if (promptResult && promptResult.action === 'export') {
      await exportAndExit(promptResult.filename, promptResult.closeTab);
    }
  }

  function createCustomPrompt(defaultFilename) {
    return new Promise((resolve) => {
      // Create overlay
      const overlay = document.createElement('div');
      overlay.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.7);
        z-index: 1000000;
        display: flex;
        justify-content: center;
        align-items: center;
        font-family: Arial, sans-serif;
      `;

      // Create dialog
      const dialog = document.createElement('div');
      dialog.style.cssText = `
        background: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 5px 15px rgba(0,0,0,0.3);
        width: 400px;
        max-width: 90%;
      `;

      dialog.innerHTML = `
        <h3 style="margin: 0 0 15px 0; color: #333;">Export M3U8 Data</h3>
        <div style="background: #f8f9fa; padding: 10px; border-radius: 5px; margin-bottom: 15px;">
          <div style="display: flex; justify-content: space-between; margin-bottom: 5px;">
            <span style="color: #666;">Data Ditangkap:</span>
            <span style="font-weight: bold; color: #2c3e50;">${window.m3u8Store.length} M3U8 URLs</span>
          </div>
          <div style="display: flex; justify-content: space-between;">
            <span style="color: #666;">File JSON:</span>
            <span style="font-weight: bold; color: #2c3e50;">${defaultFilename}.json</span>
          </div>
        </div>
        <div style="margin: 15px 0;">
          <label style="display: block; margin-bottom: 5px; font-weight: bold; color: #333;">Edit Nama File:</label>
          <input type="text" 
                 id="filenameInput" 
                 value="${defaultFilename}" 
                 style="width: 100%; padding: 8px; border: 2px solid #ddd; border-radius: 5px; font-size: 14px;"
                 onfocus="this.select()">
        </div>
        <div style="margin: 15px 0; display: flex; align-items: center;">
          <input type="checkbox" id="closeTabCheckbox" checked style="margin-right: 8px;">
          <label for="closeTabCheckbox" style="color: #333; font-size: 14px;">Tutup tab setelah export</label>
        </div>
        <div style="display: flex; gap: 10px; justify-content: flex-end;">
          <button id="cancelBtn" style="padding: 8px 16px; border: 1px solid #ddd; background: #f5f5f5; border-radius: 5px; cursor: pointer;">Batal</button>
          <button id="exportBtn" style="padding: 8px 16px; border: none; background: #2ecc71; color: white; border-radius: 5px; cursor: pointer; font-weight: bold;">Export & Tutup Tab</button>
        </div>
      `;

      overlay.appendChild(dialog);
      document.body.appendChild(overlay);

      // Focus input dan select semua text
      const input = dialog.querySelector('#filenameInput');
      input.focus();
      input.select();

      const exportBtn = dialog.querySelector('#exportBtn');
      const cancelBtn = dialog.querySelector('#cancelBtn');
      const closeTabCheckbox = dialog.querySelector('#closeTabCheckbox');

      exportBtn.onclick = () => {
        let filename = input.value.trim();
        if (!filename) {
          filename = defaultFilename;
        }
        if (!filename.endsWith('.json')) {
          filename += '.json';
        }
        document.body.removeChild(overlay);
        resolve({ 
          filename: filename, 
          action: 'export',
          closeTab: closeTabCheckbox.checked
        });
      };

      cancelBtn.onclick = () => {
        document.body.removeChild(overlay);
        resolve({ action: 'cancel' });
      };

      // Update button text berdasarkan checkbox
      closeTabCheckbox.onchange = () => {
        exportBtn.textContent = closeTabCheckbox.checked ? 'Export & Tutup Tab' : 'Export Saja';
      };

      // Enter key to export
      input.onkeypress = (e) => {
        if (e.key === 'Enter') {
          exportBtn.click();
        }
      };

      // ESC key to cancel
      overlay.onkeydown = (e) => {
        if (e.key === 'Escape') {
          cancelBtn.click();
        }
      };

      // Auto focus overlay
      overlay.focus();
    });
  }

  async function exportAndExit(filename, closeTab = true) {
    // Tandai data yang diexport
    const unexportedData = window.m3u8Store.filter(item => !item.exported);
    unexportedData.forEach(item => item.exported = true);

    const json = JSON.stringify(window.m3u8Store, null, 2);
    const blob = new Blob([json], { type: "application/json" });
    const a = document.createElement("a");
    a.href = URL.createObjectURL(blob);
    a.download = filename;
    a.click();
    URL.revokeObjectURL(a.href);

    console.log(`%c[Export] ✅ ${unexportedData.length} data diexport ke ${filename}`, "color: lime;");

    // Close tab hanya jika checkbox dicentang
    if (closeTab) {
      setTimeout(() => {
        try {
          window.close();
        } catch (e) {
          try {
            window.open('', '_self')?.close();
          } catch (e2) {
            window.location.href = 'about:blank';
          }
        }
      }, 500);
    }
  }

  // ---------- HOOK FETCH & XHR ----------
  const origFetch = window.fetch;
  window.fetch = async (...args) => {
    const res = await origFetch(...args);
    if (args[0] && args[0].toString().includes(".m3u8")) {
      saveRecord(args[0].toString());
    }
    return res;
  };

  const origOpen = XMLHttpRequest.prototype.open;
  XMLHttpRequest.prototype.open = function (method, url, ...rest) {
    if (url && url.toString().includes(".m3u8")) {
      this.addEventListener("load", () => saveRecord(url.toString()));
    }
    return origOpen.call(this, method, url, ...rest);
  };

  // ---------- MANUAL EXPORT ----------
  window.exportM3U8JSON = async function () {
    if (!window.m3u8Store.length) {
      alert("Belum ada data M3U8 yang ditangkap.");
      return;
    }
    await showExportPrompt();
  };

  // Simple UI Button
  function createSimpleUI() {
    const btn = document.createElement('button');
    btn.innerHTML = '📁 Export M3U8';
    btn.style.cssText = `
      position: fixed;
      top: 10px;
      right: 10px;
      z-index: 99999;
      background: #2c3e50;
      color: white;
      border: none;
      padding: 8px 12px;
      border-radius: 5px;
      cursor: pointer;
      font-size: 12px;
      font-family: Arial, sans-serif;
    `;
    btn.onclick = window.exportM3U8JSON;
    document.body.appendChild(btn);
  }

  // Init
  createSimpleUI();
  updateCountDisplay(); // Initialize count display
  console.log("%c[OK] M3U8 Sniffer aktif. Auto export dalam 2 detik setelah data stabil.", "color: orange;");

})();
